name: Check build on master

on:
  push:
    branches: 
      - main

jobs:
  pushbuilder:
    runs-on: ubuntu-latest
    container:
      image: obspher/ubuntu-dev:1.1.4
      env:
        CONAN_USER_HOME: /shared-conan-cache
      volumes:
        - /home/obs-vision/github/conan:/home/conan
      credentials:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
    steps:
      - name: Check out
        uses: actions/checkout@v2

      - name: Conan remote
        run: conan remote add origin https://obspherit.jfrog.io/artifactory/api/conan/default-conan

      - name: Conan user
        run: export CONAN_REVISIONS_ENABLED=1;conan user -p cmVmdGtuOjAxOjE3MTIxNDg1NTI6WEJSV25hM0NXRkFQZkdtNmhJMldzRXRHelV5 -r origin obspher@obspher.com

      - name: Clone conan cache
        run: |
          echo test

      - name: Create build directory
        run: mkdir build

      - name: Install conan dependencies
        working-directory: ./build
        run: export CONAN_REVISIONS_ENABLED=1;conan install .. --build missing --build cascade --update

      - name: Build package
        working-directory: ./build
        run: export CONAN_REVISIONS_ENABLED=1;conan build ..

      - name: Static analysis
        run:  cppcheck src/ -Iinclude/ --error-exitcode=1 --enable=all --std=c++20 --inline-suppr

      - name: Dynamic analysis on unit tests
        run: echo valgrind --leak-check=full --show-reachable=yes --trace-children=yes --error-exitcode=33 ./build/bin/unit_test

      - name: Export conan package
        run: export CONAN_REVISIONS_ENABLED=1;conan export-pkg . -bf ./build -f

      #- name: Upload on conan server
      #  run: export CONAN_REVISIONS_ENABLED=1;conan upload ${{steps.conan_infos.outputs.name}}/${{steps.conan_infos.outputs.version}}

      - name: tests
        run: |
          list_files() {
            local directory="$1"
            for file in "$directory"/* "$directory"/.*; do
              if [ -d "$file" ]; then
                # If the file is a directory, print its name and recursively list its contents
                echo "Directory: $file"
                list_files "$file"
              else
                # If the file is a regular file, print its name
                echo "File: $file"
              fi
            done
          }

          list_files "/shared-conan-cache"
        shell: bash -e {0}

      - name: Upload artifact
        run: |
          upload_files() {
              local directory="$1"
              for file in "$directory"/*; do
                  if [[ -d "$file" ]]; then
                      # Create the directory in the target Artifactory repository
                      dir_name=$(basename "$file")
                      curl -u kevin:PuGs62Zk9LSGm6b1H41c^iXK7#OIW# -XPUT "https://obspherit.jfrog.io/artifactory/default-conan-local/artifacts/$dir_name" -H "Content-Type: application/vnd.org.jfrog.artifactory.storage.FolderInfo+json"
                      echo "Uploaded directory: $file"
                      # Recursively upload the files in the directory
                      upload_files "$file"
                  else
                      # Upload the file to the target Artifactory repository
                      file_name=$(basename "$file")
                      curl -u kevin:PuGs62Zk9LSGm6b1H41c^iXK7#OIW# -XPUT "https://obspherit.jfrog.io/artifactory/default-conan-local/artifacts/$file_name" -T "$file"
                      echo "Uploaded file: $file"
                  fi
              done
          }

          upload_files "/shared-conan-cache/.conan/data"
        shell: bash -e {0}


